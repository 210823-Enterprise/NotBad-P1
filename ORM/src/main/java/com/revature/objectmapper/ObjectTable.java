package com.revature.objectmapper;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.apache.log4j.Logger;

import com.revature.annotations.Entity;
import com.revature.exceptions.UnsupportedTypeException;
import com.revature.orm.Configuration;
import com.revature.util.ColumnField;
import com.revature.util.IdField;
import com.revature.util.MetaModel;

public class ObjectTable extends ObjectMapper {
	
	private static final Logger LOG = Logger.getLogger(ObjectTable.class);
	
	private static final String SQL = "CREATE TABLE IF NOT EXISTS %s (%s);";
	
	public boolean createTableInDb(final MetaModel<?> model, final Connection connection) {

		try {
			final IdField primaryKey = model.getPrimaryKey();
			
			//set primary key context
			String context = "";
			if(primaryKey.getAutoGenerated()) {
				if(getSqlType(primaryKey).contains("INT"))
					context = primaryKey.getColumnName() + " SERIAL PRIMARY KEY";
				else
					throw new UnsupportedTypeException("Auto generated Ids only support Integer types (short, int, long)");
			}
			
			//append column field context
			for(final ColumnField field: model.getColumns()) {
				if(field.getType().getAnnotation(Entity.class) != null) {
					createTableInDb(Configuration.getInstance().getModel(field.getType()), connection);
				}
				context += ", " + field.getColumnName() + " " + getSqlType(field);
			}
			
			//create prepared statement
			final String sql = String.format(SQL, model.getTableName(), context);
			final PreparedStatement statement = connection.prepareStatement(sql);
			
			//execute and commit
			statement.execute();
			if(!connection.getAutoCommit())
				connection.commit();
			return true;
		} catch (final SQLException e) {
			LOG.error("Failed to create table for " + model.getClazz().getName() + " to database.");
			LOG.error(e.getLocalizedMessage());
		}
		return false;
	}
	
	public static ObjectTable getInstance() {
		return new ObjectTable();
	}
}
